<!--
This file was generated by Spark. Do not edit it by hand.
-->
# DSL: AshStateMachine

Provides tools for defining and working with resource-backed state machines.


## state_machine


### Nested DSLs
 * [transitions](#state_machine-transitions)
   * transition





### Options

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Default</th>
      <th colspan=2>Docs</th>
    </tr>
  </thead>
  <tbody>
    <tr>
  <td style="text-align: left">
    <a id="state_machine-initial_states" href="#state_machine-initial_states">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        initial_states
      </span>
    </a>
      <sup style="color: red">*</sup>

  </td>
  <td style="text-align: left">
    <code class="inline">list(atom)</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    The allowed starting states of this state machine.
  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="state_machine-deprecated_states" href="#state_machine-deprecated_states">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        deprecated_states
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">list(atom)</code>
  </td>
  <td style="text-align: left">
    <code class="inline">[]</code>
  </td>
  <td style="text-align: left" colspan=2>
    A list of states that have been deprecated but are still valid. These will still be in the possible list of states, but `:*` will not include them.

  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="state_machine-extra_states" href="#state_machine-extra_states">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        extra_states
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">list(atom)</code>
  </td>
  <td style="text-align: left">
    <code class="inline">[]</code>
  </td>
  <td style="text-align: left" colspan=2>
    A list of states that may be used by transitions to/from `:*`. See the docs on wildcards for more.

  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="state_machine-state_attribute" href="#state_machine-state_attribute">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        state_attribute
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">atom</code>
  </td>
  <td style="text-align: left">
    <code class="inline">:state</code>
  </td>
  <td style="text-align: left" colspan=2>
    The attribute to store the state in.
  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="state_machine-default_initial_state" href="#state_machine-default_initial_state">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        default_initial_state
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">atom</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    The default initial state
  </td>
</tr>

  </tbody>
</table>


## state_machine.transitions
### Wildcards
Use `:*` to represent "any action" when used in place of an action, or "any state" when used in place of a state.

For example:

```elixir
transition :*, from: :*, to: :*
```

The full list of states is derived at compile time from the transitions.
Use the `extra_states` to express that certain types should be included
in that list even though no transitions go to/from that state explicitly.
This is necessary for cases where there are states that use `:*` and no
transition explicitly leads to that transition.


### Nested DSLs
 * [transition](#state_machine-transitions-transition)





## state_machine.transitions.transition
```elixir
transition action
```









### Options

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Default</th>
      <th colspan=2>Docs</th>
    </tr>
  </thead>
  <tbody>
    <tr>
  <td style="text-align: left">
    <a id="action-action" href="#action-action">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        action
      </span>
    </a>
      <sup style="color: red">*</sup>

  </td>
  <td style="text-align: left">
    <code class="inline">atom</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    The corresponding action that is invoked for the transition. Use `:*` to allow any update action to perform this transition.
  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="action-from" href="#action-from">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        from
      </span>
    </a>
      <sup style="color: red">*</sup>

  </td>
  <td style="text-align: left">
    <code class="inline">list(atom) | atom</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    The states in which this action may be called. If not specified, then any state is accepted. Use `:*` to refer to all states.
  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="action-to" href="#action-to">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        to
      </span>
    </a>
      <sup style="color: red">*</sup>

  </td>
  <td style="text-align: left">
    <code class="inline">list(atom) | atom</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    The states that this action may move to. If not specified, then any state is accepted. Use `:*` to refer to all states.
  </td>
</tr>

  </tbody>
</table>





### Introspection

Target: `AshStateMachine.Transition`






